#!/usr/bin/env python3

import caster
from argparse import ArgumentParser
import logging
import sys
import signal
import os
from http.server import HTTPServer, SimpleHTTPRequestHandler
import random
import tempfile
import threading
import re
from util import getLocalIpAddress, getProcessesByName
from time import sleep
import psutil

for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)
logging.basicConfig(
    stream=sys.stdout,
    level=logging.INFO,
    format='%(levelname)s:%(name)s:%(asctime)s: %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S %z'
)
logging.getLogger('urllib3').setLevel(logging.INFO)

logger = None
castDevice = None
hasDevicePlayerStatusListener = False
httpServer = None
httpServerThread = None

class HttpRequestHandler(SimpleHTTPRequestHandler):
    def handle(self):
        try:
            SimpleHTTPRequestHandler.handle(self)
        except (BrokenPipeError, ConnectionResetError):
            pass


def startWebServer(port, root=None):
    global httpServer, httpServerThread

    if root:
        logger.info(
            'Starting web server with root {} on port {}...'.format(root, port)
        )
        os.chdir(root)
    else:
        logger.info('Starting web server on port {}...'.format(port))

    httpServer = HTTPServer(('', port), HttpRequestHandler)
    httpServerThread = threading.Thread(target=httpServer.serve_forever)
    httpServerThread.daemon = True
    httpServerThread.start()

def stopWebServer():
    global httpServer

    if not httpServer:
        return

    logger.info('Stopping web server...')

    httpServer.shutdown()
    httpServer.server_close()
    httpServer = None

def onCasterError(error=None):
    logger.error('Caster got error: {}'.format(error))
    exit(1, forceQuitCaster=True)

def stopAndQuitCasting(device, forceQuit=False):
    global castDevice, hasDevicePlayerStatusListener

    castDevice = None
    hasDevicePlayerStatusListener = False

    if not device:
        logger.warning('`device` was None or invalid')
        return

    if not forceQuit:
        if caster.isPlaying(device) or caster.isPaused(device):
            caster.stop(device)

        caster.quit(device, disconnectFromDevice=True)

def exit(exitCode=0, forceQuitCaster=False):
    global castDevice

    logger.info('Stopping subprocesses...')

    caster.cancelDeviceHostScanner()

    if not forceQuitCaster:
        stopAndQuitCasting(castDevice, forceQuit=forceQuitCaster)
    else:
        logger.info(
            'Exit was called with caster force quit requested - '
            'not calling casterâ€™s stop+quit'
        )

    castDevice = None

    stopWebServer()

    logger.info('Exiting with code {}'.format(exitCode))

    sys.exit(exitCode)

def onSIGINT(*args):
    logger.info('Received SIGINT')
    exit(0)

def onSIGTERM(*args):
    logger.info('Received SIGTERM')
    exit(0)

def collectArgs():
    argParser = ArgumentParser(description='Play a media file on a Chromecast device')
    argParser._action_groups.pop()

    requiredArgs = argParser.add_argument_group('required arguments')
    requiredArgs.add_argument(
        '--device',
        '-d',
        type=str,
        help='Name of the Chromecast device to cast to'
    )
    requiredArgs.add_argument(
        '--uri',
        '-u',
        type=str,
        help='URI to the media file to be played'
    )

    optionalArgs = argParser.add_argument_group('optional arguments')
    optionalArgs.add_argument(
        '--servePort',
        '-p',
        type=int,
        default=8000,
        help='Port to use for serving local files'
    )
    optionalArgs.add_argument(
        '--deviceVolume',
        '-v',
        type=float,
        help='Volume (0.0-1.0) to set on Chromecast device'
    )
    optionalArgs.add_argument(
        '--quit',
        '-q',
        action='store_true',
        help='Pass to quit an already running process'
    )

    args = argParser.parse_args()

    if not args.quit:
        if not args.device or not args.uri:
            argParser.print_usage()
            sys.exit(1)

        if not (args.uri.startswith('https://') or caster.isSpotifyUri(args.uri)) and re.match('^[a-z]+:', args.uri):
            argParser.error(
                'URI must be an HTTPS URL, a Spotify URI or '
                'a path to a local file.'
            )

        if args.deviceVolume and (args.deviceVolume < 0.0 or args.deviceVolume > 1.0):
            argParser.error('Device volume must be between 0.0 and 1.0.')

    return args

def quitProcesses(processes):
    if not processes:
        logger.info('No processes found')

    logger.info(
        'Stopping {} running process(es)...'.format(len(processes))
    )

    timeout = 5

    for p in processes:
        p.terminate()

    _, alive = psutil.wait_procs(processes, timeout=timeout)

    if alive:
        logger.info(
            'Timeout reached - killing {} running process(es) '
            'still running...'.format(len(alive))
        )

        for p in alive:
            p.kill()

def main():
    global logger, castDevice, hasDevicePlayerStatusListener

    logger = logging.getLogger(__name__)

    signal.signal(signal.SIGINT, onSIGINT)
    signal.signal(signal.SIGTERM, onSIGTERM)

    args = collectArgs()

    if args.quit:
        quitProcesses(getProcessesByName(
            ['python3', 'python'],
            sys.argv[0]
        ))
        return

    caster.setup(errorHandler=onCasterError)

    if not re.match('^https?:\/\/', args.uri) and not caster.isSpotifyUri(args.uri):
        resolvedUri = 'http://{}:{}/{}'.format(
            getLocalIpAddress(),
            args.servePort,
            os.path.basename(os.path.expanduser(args.uri))
        )

        logger.info('Resolved URI for local file: {}'.format(resolvedUri))

        startWebServer(
            args.servePort,
            root=os.path.dirname(os.path.expanduser(args.uri))
        )
    else:
        resolvedUri = args.uri

    try:
        castDevice = caster.play({
            'media': {
                'uri': resolvedUri,
                'args': {
                    'autoplay': True,
                    'title': os.path.basename(resolvedUri)
                }
            },
            'volume': args.deviceVolume
        }, caster.getDevice(args.device))
    except (caster.DeviceNotFoundError,
            caster.PlaybackStartTimeoutError,
            caster.SpotifyPlaybackError):
        exit(1)
    else:
        if not castDevice:
            exit(1)

    def onDevicePlayerStatus(device, status):
        global castDevice

        if not castDevice:
            logger.debug(
                'Got device media player state "{}" while `castDevice` '
                'was `None`'.format(status.player_state)
            )
            return

        logger.info(
            'Got device media player state "{}"'.format(
                status.player_state
            )
        )

        if status.player_state in (
                caster.MEDIA_PLAYER_STATE_PAUSED,
                caster.MEDIA_PLAYER_STATE_IDLE,
                caster.MEDIA_PLAYER_STATE_UNKNOWN):
            exit(0)

    if not hasDevicePlayerStatusListener:
        caster.addDevicePlayerStatusListener(
            castDevice,
            onDevicePlayerStatus
        )

        hasDevicePlayerStatusListener = True

    while True:
        sleep(10)
        pass

if __name__ == '__main__':
    main()
